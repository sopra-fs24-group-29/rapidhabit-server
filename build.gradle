plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://storage.googleapis.com/spring-cloud-gcp/maven/release" }
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

sonar {
    properties {
        property "sonar.projectKey", "sopra-fs24-group-29_rapidhabit-server"
        property "sonar.organization", "sopra-fs24-group-29"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.gradle.skipCompile", "true"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-websocket' // WebSocket-Unterstützung
    implementation 'org.springframework.boot:spring-boot-starter-web' // Web-Unterstützung
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA für Datenbankinteraktionen
    implementation 'org.springframework.security:spring-security-crypto' // Für kryptographische Funktionen
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb' // MongoDB Starter
    implementation 'org.mapstruct:mapstruct:1.3.1.Final' // MapStruct für Objektmapping
    implementation 'org.projectlombok:lombok:1.18.28' // Lombok für Boilerplate-Code Reduktion
    implementation 'com.squareup.okhttp3:okhttp:4.9.0' // Adding OkHttpClient for HTTP requests to OpenAI API
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager:3.3.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final' // MapStruct Processor
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final' // MapStruct im Test-Scope

    developmentOnly 'org.springframework.boot:spring-boot-devtools' // DevTools für automatische Neuladung
    runtimeOnly 'com.h2database:h2' // H2 Datenbank für Entwicklungszeit

    // Testabhängigkeiten
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2' // JUnit Jupiter API für Tests
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2' // JUnit Jupiter Engine
    testImplementation 'org.mockito:mockito-inline:4.8.0' // Hinzufügen der mockito-inline Abhängigkeit
}


bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}
bootRun {
    jvmArgs = [
            '-Duser.timezone=Europe/Zurich'
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
    // environment 'GOOGLE_APPLICATION_CREDENTIALS', '../sopra-fs24-group29-server-670017ef725b.json'
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

defaultTasks 'bootJar', 'build'